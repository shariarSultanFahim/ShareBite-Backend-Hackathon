// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  phone      String    @unique
  username   String    @unique
  avatar     String? // URL to the avatar image
  passhash   String    @default("") // This is a placeholder for the password hash
  passphrase String    @default("") // This is a placeholder for the password salt for OTP generation
  role       AdminRole @default(ADMIN)
  auth_sessions                       AuthSession[]
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model AuthSession {
  id         Int       @id @default(autoincrement())
  admin_id    Int
  admin       Admin     @relation(fields: [admin_id], references: [id], onDelete: Cascade) // On delete user, delete session
  token      String    @unique
  expired_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}
model Donor {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  avatar       String?
  email        String         @unique
  phone        String         @unique
  passhash     String         @default("")
  passphrase   String         @default("")
  address      String
  auth_sessions DonorSession[]
  is_active    Boolean        @default(true)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model DonorSession {
  id         Int       @id @default(autoincrement())
  donor_id   Int
  donor      Donor     @relation(fields: [donor_id], references: [id], onDelete: Cascade)
  token      String    @unique
  expired_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}


enum AdminRole {
  ADMIN
  HUB_MANAGER
  RIDER
}
